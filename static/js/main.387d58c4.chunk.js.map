{"version":3,"sources":["constants.js","Pokedex.js","Pokemon.js","App.js","serviceWorker.js","index.js"],"names":["toFirstCharUppercase","name","charAt","toUpperCase","slice","useStyles","makeStyles","theme","pokedexContainer","paddingTop","paddingLeft","paddingRight","cardMedia","margin","cardContent","textAlign","searchContainer","display","backgroundColor","fade","palette","common","white","marginTop","marginBottom","searchIcon","alignSelf","searchInput","width","PokeDex","props","history","classes","useState","pokemonData","setPokemonData","filter","setFilter","useEffect","axios","get","then","response","results","data","newPokemonData","forEach","pokemon","index","id","sprite","AppBar","position","Toolbar","className","TextField","onChange","e","target","value","label","variant","Grid","container","spacing","Object","keys","map","pokemonId","includes","console","log","item","xs","key","Card","onClick","push","CardMedia","image","style","height","CardContent","Typography","getPokemonCard","CircularProgress","Pokemon","match","params","undefined","setPokemon","catch","error","species","weight","types","sprites","fullImageUrl","front_default","src","Link","href","url","typeInfo","type","generatePokemonJSX","Button","App","exact","path","render","Pokedex","Boolean","window","location","hostname","createBrowserHistory","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.387d58c4.chunk.js","sourcesContent":["export const toFirstCharUppercase = name =>\r\n  name.charAt(0).toUpperCase() + name.slice(1);","import React, { useEffect, useState } from \"react\";\r\nimport { AppBar, Toolbar, Grid,Card,CardContent, CircularProgress,CardMedia,Typography} from \"@material-ui/core\";\r\nimport { fade,makeStyles } from '@material-ui/core/styles';\r\nimport mockData from './mockData';\r\nimport { toFirstCharUppercase } from \"./constants\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport axios from \"axios\";\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  pokedexContainer: {\r\n    paddingTop: \"20px\",\r\n    paddingLeft: \"50px\",\r\n    paddingRight: \"50px\",\r\n  },\r\n  cardMedia: {\r\n    margin: \"auto\",\r\n  },\r\n  cardContent: {\r\n    textAlign: \"center\",\r\n  },\r\n  searchContainer: {\r\n    display: \"flex\",\r\n    backgroundColor: fade(theme.palette.common.white, 0.15),\r\n    paddingLeft: \"20px\",\r\n    paddingRight: \"20px\",\r\n    marginTop: \"5px\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  searchIcon: {\r\n    alignSelf: \"flex-end\",\r\n    marginBottom: \"5px\",\r\n  },\r\n  searchInput: {\r\n    width: \"200px\",\r\n    margin: \"5px\",\r\n  },\r\n}));\r\n\r\n \r\nconst PokeDex = props => {\r\n  const{history}=props\r\n  const classes = useStyles();\r\n  const [pokemonData, setPokemonData] = useState({});\r\n  const [filter, setFilter] = useState(\"\");\r\n\r\n  const handleSearchChange =(e)=>{\r\n    setFilter(e.target.value);\r\n  };\r\n  \r\n  useEffect(() => {\r\n    axios\r\n      .get(`https://pokeapi.co/api/v2/pokemon?limit=807`)\r\n      .then(function (response) {\r\n        const { data } = response;\r\n        const { results } = data;\r\n        const newPokemonData = {};\r\n        results.forEach((pokemon, index) => {\r\n          newPokemonData[index + 1] = {\r\n            id: index + 1,\r\n            name: pokemon.name,\r\n            sprite: `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${\r\n              index + 1\r\n            }.png`,\r\n          };\r\n        });\r\n        setPokemonData(newPokemonData);\r\n      });\r\n  }, []);\r\n\r\n  const getPokemonCard = (pokemonId) => {\r\n    console.log(pokemonData[`${pokemonId}`]);\r\n    const { id, name ,sprite} = pokemonData[`${pokemonId}`];\r\n    \r\n    \r\n    return (\r\n      <Grid item xs={4} key={pokemonId}>\r\n        <Card onClick={()=>history.push(`${pokemonId}`)}>\r\n        <CardMedia\r\n            className={classes.cardMedia}\r\n            image={sprite}\r\n            style={{ width: \"130px\", height: \"130px\" }}\r\n          />\r\n\r\n          <CardContent className={classes.CardContent}> <Typography>{`${id}. ${toFirstCharUppercase(name)}`}</Typography></CardContent>\r\n        </Card>\r\n      </Grid>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <AppBar position=\"static\">\r\n        \r\n\r\n          <Toolbar>\r\n          <div className={classes.searchContainer}>\r\n            <SearchIcon className={classes.searchIcon} />\r\n            <TextField\r\n              className={classes.searchInput}\r\n              onChange={handleSearchChange}\r\n              label=\"Pokemon\"\r\n              variant=\"standard\"\r\n            />\r\n          </div>\r\n          </Toolbar>\r\n      </AppBar>\r\n      {pokemonData ? (\r\n           <Grid container spacing={2} className={classes.pokedexContainer}>\r\n           {Object.keys(pokemonData).map(\r\n             (pokemonId) =>\r\n               pokemonData[pokemonId].name.includes(filter) &&\r\n               getPokemonCard(pokemonId)\r\n           )}\r\n         </Grid>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PokeDex;","import React,{useState,useEffect} from 'react';\r\nimport axios from 'axios'\r\nimport { Typography, Link, CircularProgress, Button } from \"@material-ui/core\";\r\nimport { toFirstCharUppercase } from \"./constants\";\r\nconst Pokemon = (props) => {\r\n    const {history,match}=props;\r\n    const{params}=match;\r\n    const {pokemonId}=params;\r\n    const [pokemon,setPokemon]=useState(undefined);\r\n\r\n    useEffect(() => {\r\n      axios\r\n        .get(`https://pokeapi.co/api/v2/pokemon/${pokemonId}/`)\r\n        .then(function (response) {\r\n          const { data } = response;\r\n          setPokemon(data);\r\n        })\r\n        .catch(function (error) {\r\n          setPokemon(false);\r\n        });\r\n    }, [pokemonId]);\r\n    \r\n\r\n    const generatePokemonJSX=()=>{\r\n        const { name, id, species, height, weight, types, sprites } = pokemon;\r\n        const fullImageUrl = `https://pokeres.bastionbot.org/images/pokemon/${id}.png`;\r\n        const { front_default } = sprites;\r\n        return(\r\n            <>\r\n            <Typography variant=\"h1\">\r\n            {`${id}.`} {toFirstCharUppercase(name)}\r\n            <img src={front_default} />\r\n          </Typography>\r\n         \r\n            <img style={{ width: \"300px\", height: \"300px\" }} src={fullImageUrl} />\r\n            <Typography variant=\"h3\">Pokemon Info</Typography>\r\n            <Typography>\r\n          {\"Species: \"}\r\n          <Link href={species.url}>{species.name} </Link>\r\n        </Typography>\r\n        <Typography>Height: {height} </Typography>\r\n        <Typography>Weight: {weight} </Typography>\r\n        <Typography variant=\"h6\"> Types:</Typography>\r\n        {types.map((typeInfo) => {\r\n          const { type } = typeInfo;\r\n          const { name } = type;\r\n          return <Typography key={name}> {`${name}`}</Typography>;\r\n        })}\r\n            </>\r\n        )\r\n    }\r\n        return (\r\n       <>\r\n       {pokemon === undefined && <CircularProgress />}\r\n      {pokemon !== undefined && pokemon && generatePokemonJSX(pokemon)}\r\n      {pokemon === false && <Typography> Pokemon not found</Typography>}\r\n      {pokemon !== undefined && (\r\n        <Button variant=\"contained\" onClick={() => history.push(\"/\")}>\r\n          back to pokedex\r\n        </Button>\r\n      )}\r\n       </>\r\n    );\r\n};\r\n\r\nexport default Pokemon;","import React from 'react';\n\nimport {Route,Switch} from 'react-router-dom'\nimport Pokedex from './Pokedex'\nimport Pokemon from './Pokemon'\n\nfunction App() {\n  return (\n    <Switch>\n    <Route exact path=\"/\" render={(props) => <Pokedex {...props} />} />\n    <Route\n      exact\n      path=\"/:pokemonId\"\n      render={(props) => <Pokemon {...props} />}\n    />\n  </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Router} from \"react-router-dom\";\nimport {createBrowserHistory} from 'history'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nconst history = createBrowserHistory();\nReactDOM.render(\n  <React.StrictMode>\n       <Router history={history}>\n         <App />\n       </Router>\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}